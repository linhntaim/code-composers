{"version":3,"sources":["../src/composer.js"],"names":["Composer","content","inFile","outFile","trim","fs","existsSync","composedFileExtension","dir","path","dirname","mkdirSync","recursive","writeFileSync","compose","readFileSync","toString"],"mappings":"8FAAA,8CACA,kD,2sBAEaA,CAAAA,Q,wHACT;AACJ;AACA;AACA;AACA,OACI,iBAAQC,OAAR,CAAiB,CACb,MAAOA,CAAAA,OACV,CAED;AACJ;AACA;AACA;AACA;AACA,O,2BACI,qBAAYC,MAAZ,CAAkC,IAAdC,CAAAA,OAAc,2DAAJ,EAAI,CAC9BD,MAAM,CAAGA,MAAM,CAAGA,MAAM,CAACE,IAAP,EAAH,CAAmB,EAAlC,CACA,GAAI,CAACF,MAAL,CAAa,CACT,KAAM,sBACT,CACD,GAAI,CAACG,eAAGC,UAAH,CAAcJ,MAAd,CAAL,CAA4B,CACxB,KAAM,WAAaA,MAAb,CAAsB,mBAC/B,CAEDC,OAAO,CAAGA,OAAO,CAAGA,OAAO,CAACC,IAAR,EAAH,CAAoB,EAArC,CACA,GAAI,CAACD,OAAL,CAAc,CACVA,OAAO,CAAGD,MAAM,CAAG,GAAT,CAAe,KAAKK,qBAAL,EAC5B,CACD,GAAMC,CAAAA,GAAG,CAAGC,iBAAKC,OAAL,CAAaP,OAAb,CAAZ,CACA,GAAI,CAACE,eAAGC,UAAH,CAAcE,GAAd,CAAL,CAAyB,CACrBH,eAAGM,SAAH,CAAaH,GAAb,CAAkB,CAACI,SAAS,CAAE,IAAZ,CAAlB,CACH,CACDP,eAAGQ,aAAH,CAAiBV,OAAjB,CAA0B,KAAKW,OAAL,CAAaT,eAAGU,YAAH,CAAgBb,MAAhB,EAAwBc,QAAxB,CAAiC,MAAjC,CAAb,CAA1B,EACA,MAAO,KACV,C,qCAED,gCAAwB,CACpB,MAAO,UACV,C","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\n\r\nexport class Composer {\r\n    /**\r\n     *\r\n     * @param {String} content\r\n     * @return {String}\r\n     */\r\n    compose(content) {\r\n        return content\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} inFile\r\n     * @param {String} outFile\r\n     * @return {Composer|*}\r\n     */\r\n    composeFile(inFile, outFile = '') {\r\n        inFile = inFile ? inFile.trim() : ''\r\n        if (!inFile) {\r\n            throw 'Source is undefined.'\r\n        }\r\n        if (!fs.existsSync(inFile)) {\r\n            throw 'Source [' + inFile + '] does not exist.'\r\n        }\r\n\r\n        outFile = outFile ? outFile.trim() : ''\r\n        if (!outFile) {\r\n            outFile = inFile + '.' + this.composedFileExtension()\r\n        }\r\n        const dir = path.dirname(outFile)\r\n        if (!fs.existsSync(dir)) {\r\n            fs.mkdirSync(dir, {recursive: true})\r\n        }\r\n        fs.writeFileSync(outFile, this.compose(fs.readFileSync(inFile).toString('utf8')))\r\n        return this\r\n    }\r\n\r\n    composedFileExtension() {\r\n        return 'composed'\r\n    }\r\n}"],"file":"composer.js"}